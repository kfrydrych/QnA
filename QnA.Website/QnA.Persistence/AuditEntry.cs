using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;
using QnA.Application.Interfaces;
using QnA.Domain.Common;
using QnA.Domain.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;

namespace QnA.Persistence
{
    public class AuditEntry
    {
        private readonly IDateService _dateService;
        private readonly IUser _user;
        public AuditEntry(EntityEntry entry, IDateService dateService, IUser user)
        {
            Entry = entry;
            _dateService = dateService;
            _user = user;

            SetTableValues();
            SetEventValues();
            CaptureProperties();
        }

        public EntityEntry Entry { get; }
        public string TableName { get; protected set; }
        public string EventMessage { get; protected set; }
        public string ModifiedBy { get; protected set; }
        public object SubjectId { get; protected set; }
        public Dictionary<string, object> KeyValues { get; } = new Dictionary<string, object>();
        public Dictionary<string, object> OldValues { get; } = new Dictionary<string, object>();
        public Dictionary<string, object> NewValues { get; } = new Dictionary<string, object>();
        public List<PropertyEntry> TemporaryProperties { get; } = new List<PropertyEntry>();

        public bool HasTemporaryProperties => TemporaryProperties.Any();

        public AuditRecord ToAudit()
        {
            var audit = new AuditRecord
            {
                TableName = TableName,
                EventMessage = EventMessage,
                DateTime = _dateService.Now,
                SubjectId = (Guid)SubjectId,
                KeyValues = JsonConvert.SerializeObject(KeyValues),
                OldValues = OldValues.Count == 0 ? null : JsonConvert.SerializeObject(OldValues),
                NewValues = NewValues.Count == 0 ? null : JsonConvert.SerializeObject(NewValues),
                ModifiedBy = ModifiedBy
            };
            return audit;
        }

        private void SetEventValues()
        {
            EventMessage = "Modified";
            ModifiedBy = _user.Username ?? _user.UniqueSource;

            if (Entry.Entity is AuditableEntity entity)
            {
                EventMessage = entity.LastChangeEvent;
                ModifiedBy = entity.LastModifiedBy;
            }
        }
        private void SetTableValues()
        {
            TableName = Entry.Metadata.GetTableName();
        }
        private void CaptureProperties()
        {
            foreach (var property in Entry.Properties)
            {
                if (property.IsTemporary)
                {
                    // value will be generated by the database, get the value after saving
                    TemporaryProperties.Add(property);
                    continue;
                }

                var propertyName = property.Metadata.Name;
                if (property.Metadata.IsPrimaryKey())
                {
                    SubjectId = property.CurrentValue;
                    continue;
                }
                if (property.Metadata.IsForeignKey())
                {
                    KeyValues[propertyName] = property.CurrentValue;
                    continue;
                }

                switch (Entry.State)
                {
                    case EntityState.Added:
                        NewValues[propertyName] = property.CurrentValue;
                        break;

                    case EntityState.Deleted:
                        OldValues[propertyName] = property.OriginalValue;
                        break;

                    case EntityState.Modified:
                        if (property.IsModified)
                        {
                            OldValues[propertyName] = property.OriginalValue;
                            NewValues[propertyName] = property.CurrentValue;
                        }
                        break;
                }
            }
        }
    }
}
